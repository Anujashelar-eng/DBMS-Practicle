CREATE TABLE accounts (
    account_id NUMBER PRIMARY KEY,
    status VARCHAR2(10),            -- Status can be 'active' or 'inactive'
    last_transaction_date DATE       -- Date of the last transaction
);

-- Insert active accounts
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (1, 'active', SYSDATE - 100);
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (2, 'active', SYSDATE - 30);

-- Insert inactive accounts with last transaction over a year ago
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (3, 'inactive', SYSDATE - 400);
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (4, 'inactive', SYSDATE - 800);

-- Insert inactive accounts with last transaction within a year
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (5, 'inactive', SYSDATE - 200);
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (6, 'inactive', SYSDATE - 150);

-- Insert additional inactive accounts for testing
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (7, 'inactive', SYSDATE - 500);
INSERT INTO accounts (account_id, status, last_transaction_date) VALUES (8, 'inactive', SYSDATE - 700);

DECLARE
    -- Variable to hold the number of updated rows
    v_rows_updated NUMBER;
BEGIN
    -- Update accounts that have been inactive for the last 365 days
    UPDATE accounts
    SET status = 'active'
    WHERE status = 'inactive'
      AND last_transaction_date <= SYSDATE - 365;

    -- Get the number of rows affected by the update
    v_rows_updated := SQL%ROWCOUNT;

    -- Check if any rows were updated
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE(v_rows_updated || ' account(s) were successfully reactivated.');
    ELSIF SQL%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('No inactive accounts found for reactivation.');
    END IF;
END;
/
