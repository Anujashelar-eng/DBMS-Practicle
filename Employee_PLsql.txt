CREATE TABLE employees (
    employee_id NUMBER PRIMARY KEY,
    name VARCHAR2(50),
    salary NUMBER(10, 2)
);

CREATE TABLE increment_salary (
    increment_id NUMBER PRIMARY KEY,
    employee_id NUMBER REFERENCES employees(employee_id),
    old_salary NUMBER(10, 2),
    new_salary NUMBER(10, 2),
    increment_date DATE DEFAULT SYSDATE
);

INSERT INTO employees (employee_id, name, salary) VALUES (1, 'Alice', 30000);
INSERT INTO employees (employee_id, name, salary) VALUES (2, 'Bob', 45000);
INSERT INTO employees (employee_id, name, salary) VALUES (3, 'Charlie', 25000);
INSERT INTO employees (employee_id, name, salary) VALUES (4, 'David', 55000);
INSERT INTO employees (employee_id, name, salary) VALUES (5, 'Eve', 20000);

DECLARE
    -- Variable to store the average salary
    v_avg_salary NUMBER(10, 2);
BEGIN
    -- Calculate the average salary
    SELECT AVG(salary)
    INTO v_avg_salary
    FROM employees;

    -- Update salaries and log increments
    FOR emp IN (SELECT employee_id, salary FROM employees WHERE salary < v_avg_salary) LOOP
        -- Update the salary of employees earning below the average
        UPDATE employees
        SET salary = salary * 1.10
        WHERE employee_id = emp.employee_id;
        
        -- Insert a record in the increment_salary table
        INSERT INTO increment_salary (increment_id, employee_id, old_salary, new_salary, increment_date)
        VALUES (increment_salary_seq.NEXTVAL, emp.employee_id, emp.salary, emp.salary * 1.10, SYSDATE);
    END LOOP;

    -- Display message for successful update
    DBMS_OUTPUT.PUT_LINE('Salaries updated and records logged for employees below average salary.');
END;
/

CREATE SEQUENCE increment_salary_seq START WITH 1 INCREMENT BY 1;

SELECT * FROM employees;
SELECT * FROM increment_salary;
